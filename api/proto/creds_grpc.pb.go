// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/proto/creds.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredsClient is the client API for Creds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredsClient interface {
	GetAllCreds(ctx context.Context, in *GetAllCredsRequest, opts ...grpc.CallOption) (*GetAllCredsResponse, error)
	SetAllCreds(ctx context.Context, in *SetAllCredsRequest, opts ...grpc.CallOption) (*SetAllCredsResponse, error)
}

type credsClient struct {
	cc grpc.ClientConnInterface
}

func NewCredsClient(cc grpc.ClientConnInterface) CredsClient {
	return &credsClient{cc}
}

func (c *credsClient) GetAllCreds(ctx context.Context, in *GetAllCredsRequest, opts ...grpc.CallOption) (*GetAllCredsResponse, error) {
	out := new(GetAllCredsResponse)
	err := c.cc.Invoke(ctx, "/proto.Creds/GetAllCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credsClient) SetAllCreds(ctx context.Context, in *SetAllCredsRequest, opts ...grpc.CallOption) (*SetAllCredsResponse, error) {
	out := new(SetAllCredsResponse)
	err := c.cc.Invoke(ctx, "/proto.Creds/SetAllCreds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredsServer is the server API for Creds service.
// All implementations must embed UnimplementedCredsServer
// for forward compatibility
type CredsServer interface {
	GetAllCreds(context.Context, *GetAllCredsRequest) (*GetAllCredsResponse, error)
	SetAllCreds(context.Context, *SetAllCredsRequest) (*SetAllCredsResponse, error)
	mustEmbedUnimplementedCredsServer()
}

// UnimplementedCredsServer must be embedded to have forward compatible implementations.
type UnimplementedCredsServer struct {
}

func (UnimplementedCredsServer) GetAllCreds(context.Context, *GetAllCredsRequest) (*GetAllCredsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCreds not implemented")
}
func (UnimplementedCredsServer) SetAllCreds(context.Context, *SetAllCredsRequest) (*SetAllCredsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllCreds not implemented")
}
func (UnimplementedCredsServer) mustEmbedUnimplementedCredsServer() {}

// UnsafeCredsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredsServer will
// result in compilation errors.
type UnsafeCredsServer interface {
	mustEmbedUnimplementedCredsServer()
}

func RegisterCredsServer(s grpc.ServiceRegistrar, srv CredsServer) {
	s.RegisterService(&Creds_ServiceDesc, srv)
}

func _Creds_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCredsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredsServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Creds/GetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredsServer).GetAllCreds(ctx, req.(*GetAllCredsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creds_SetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllCredsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredsServer).SetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Creds/SetAllCreds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredsServer).SetAllCreds(ctx, req.(*SetAllCredsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Creds_ServiceDesc is the grpc.ServiceDesc for Creds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Creds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Creds",
	HandlerType: (*CredsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCreds",
			Handler:    _Creds_GetAllCreds_Handler,
		},
		{
			MethodName: "SetAllCreds",
			Handler:    _Creds_SetAllCreds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/creds.proto",
}
